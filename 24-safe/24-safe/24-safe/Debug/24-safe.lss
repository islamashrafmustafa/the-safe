
24-safe.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000aa2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008e  00800060  00000aa2  00000b36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000ee  008000ee  00000bc4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bc4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bf4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c5d  00000000  00000000  00000d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b9  00000000  00000000  000029b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e24  00000000  00000000  0000336e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  00004194  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000555  00000000  00000000  00004388  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f28  00000000  00000000  000048dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00005805  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ea       	ldi	r30, 0xA2	; 162
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 3e       	cpi	r26, 0xEE	; 238
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae ee       	ldi	r26, 0xEE	; 238
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3f       	cpi	r26, 0xF2	; 242
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9b 03 	call	0x736	; 0x736 <main>
  8a:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vsetPINDir>:
		break ;
		default:
		break ;
	}
	return return_val;
}
  92:	82 34       	cpi	r24, 0x42	; 66
  94:	19 f1       	breq	.+70     	; 0xdc <DIO_vsetPINDir+0x4a>
  96:	18 f4       	brcc	.+6      	; 0x9e <DIO_vsetPINDir+0xc>
  98:	81 34       	cpi	r24, 0x41	; 65
  9a:	39 f0       	breq	.+14     	; 0xaa <DIO_vsetPINDir+0x18>
  9c:	08 95       	ret
  9e:	83 34       	cpi	r24, 0x43	; 67
  a0:	b1 f1       	breq	.+108    	; 0x10e <DIO_vsetPINDir+0x7c>
  a2:	84 34       	cpi	r24, 0x44	; 68
  a4:	09 f4       	brne	.+2      	; 0xa8 <DIO_vsetPINDir+0x16>
  a6:	4c c0       	rjmp	.+152    	; 0x140 <DIO_vsetPINDir+0xae>
  a8:	08 95       	ret
  aa:	41 30       	cpi	r20, 0x01	; 1
  ac:	59 f4       	brne	.+22     	; 0xc4 <DIO_vsetPINDir+0x32>
  ae:	2a b3       	in	r18, 0x1a	; 26
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <DIO_vsetPINDir+0x28>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <DIO_vsetPINDir+0x24>
  be:	82 2b       	or	r24, r18
  c0:	8a bb       	out	0x1a, r24	; 26
  c2:	08 95       	ret
  c4:	2a b3       	in	r18, 0x1a	; 26
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <DIO_vsetPINDir+0x3e>
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <DIO_vsetPINDir+0x3a>
  d4:	80 95       	com	r24
  d6:	82 23       	and	r24, r18
  d8:	8a bb       	out	0x1a, r24	; 26
  da:	08 95       	ret
  dc:	41 30       	cpi	r20, 0x01	; 1
  de:	59 f4       	brne	.+22     	; 0xf6 <DIO_vsetPINDir+0x64>
  e0:	27 b3       	in	r18, 0x17	; 23
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	02 c0       	rjmp	.+4      	; 0xec <DIO_vsetPINDir+0x5a>
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	6a 95       	dec	r22
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <DIO_vsetPINDir+0x56>
  f0:	82 2b       	or	r24, r18
  f2:	87 bb       	out	0x17, r24	; 23
  f4:	08 95       	ret
  f6:	27 b3       	in	r18, 0x17	; 23
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <DIO_vsetPINDir+0x70>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <DIO_vsetPINDir+0x6c>
 106:	80 95       	com	r24
 108:	82 23       	and	r24, r18
 10a:	87 bb       	out	0x17, r24	; 23
 10c:	08 95       	ret
 10e:	41 30       	cpi	r20, 0x01	; 1
 110:	59 f4       	brne	.+22     	; 0x128 <DIO_vsetPINDir+0x96>
 112:	24 b3       	in	r18, 0x14	; 20
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_vsetPINDir+0x8c>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_vsetPINDir+0x88>
 122:	82 2b       	or	r24, r18
 124:	84 bb       	out	0x14, r24	; 20
 126:	08 95       	ret
 128:	24 b3       	in	r18, 0x14	; 20
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_vsetPINDir+0xa2>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_vsetPINDir+0x9e>
 138:	80 95       	com	r24
 13a:	82 23       	and	r24, r18
 13c:	84 bb       	out	0x14, r24	; 20
 13e:	08 95       	ret
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	59 f4       	brne	.+22     	; 0x15a <DIO_vsetPINDir+0xc8>
 144:	21 b3       	in	r18, 0x11	; 17
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_vsetPINDir+0xbe>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_vsetPINDir+0xba>
 154:	82 2b       	or	r24, r18
 156:	81 bb       	out	0x11, r24	; 17
 158:	08 95       	ret
 15a:	21 b3       	in	r18, 0x11	; 17
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_vsetPINDir+0xd4>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_vsetPINDir+0xd0>
 16a:	80 95       	com	r24
 16c:	82 23       	and	r24, r18
 16e:	81 bb       	out	0x11, r24	; 17
 170:	08 95       	ret

00000172 <DIO_write>:
 172:	82 34       	cpi	r24, 0x42	; 66
 174:	19 f1       	breq	.+70     	; 0x1bc <DIO_write+0x4a>
 176:	18 f4       	brcc	.+6      	; 0x17e <DIO_write+0xc>
 178:	81 34       	cpi	r24, 0x41	; 65
 17a:	39 f0       	breq	.+14     	; 0x18a <DIO_write+0x18>
 17c:	08 95       	ret
 17e:	83 34       	cpi	r24, 0x43	; 67
 180:	b1 f1       	breq	.+108    	; 0x1ee <DIO_write+0x7c>
 182:	84 34       	cpi	r24, 0x44	; 68
 184:	09 f4       	brne	.+2      	; 0x188 <DIO_write+0x16>
 186:	4c c0       	rjmp	.+152    	; 0x220 <DIO_write+0xae>
 188:	08 95       	ret
 18a:	41 30       	cpi	r20, 0x01	; 1
 18c:	59 f4       	brne	.+22     	; 0x1a4 <DIO_write+0x32>
 18e:	2b b3       	in	r18, 0x1b	; 27
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_write+0x28>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_write+0x24>
 19e:	82 2b       	or	r24, r18
 1a0:	8b bb       	out	0x1b, r24	; 27
 1a2:	08 95       	ret
 1a4:	2b b3       	in	r18, 0x1b	; 27
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_write+0x3e>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_write+0x3a>
 1b4:	80 95       	com	r24
 1b6:	82 23       	and	r24, r18
 1b8:	8b bb       	out	0x1b, r24	; 27
 1ba:	08 95       	ret
 1bc:	41 30       	cpi	r20, 0x01	; 1
 1be:	59 f4       	brne	.+22     	; 0x1d6 <DIO_write+0x64>
 1c0:	28 b3       	in	r18, 0x18	; 24
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_write+0x5a>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_write+0x56>
 1d0:	82 2b       	or	r24, r18
 1d2:	88 bb       	out	0x18, r24	; 24
 1d4:	08 95       	ret
 1d6:	28 b3       	in	r18, 0x18	; 24
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_write+0x70>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_write+0x6c>
 1e6:	80 95       	com	r24
 1e8:	82 23       	and	r24, r18
 1ea:	88 bb       	out	0x18, r24	; 24
 1ec:	08 95       	ret
 1ee:	41 30       	cpi	r20, 0x01	; 1
 1f0:	59 f4       	brne	.+22     	; 0x208 <DIO_write+0x96>
 1f2:	25 b3       	in	r18, 0x15	; 21
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_write+0x8c>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_write+0x88>
 202:	82 2b       	or	r24, r18
 204:	85 bb       	out	0x15, r24	; 21
 206:	08 95       	ret
 208:	25 b3       	in	r18, 0x15	; 21
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_write+0xa2>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_write+0x9e>
 218:	80 95       	com	r24
 21a:	82 23       	and	r24, r18
 21c:	85 bb       	out	0x15, r24	; 21
 21e:	08 95       	ret
 220:	41 30       	cpi	r20, 0x01	; 1
 222:	59 f4       	brne	.+22     	; 0x23a <DIO_write+0xc8>
 224:	22 b3       	in	r18, 0x12	; 18
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_write+0xbe>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_write+0xba>
 234:	82 2b       	or	r24, r18
 236:	82 bb       	out	0x12, r24	; 18
 238:	08 95       	ret
 23a:	22 b3       	in	r18, 0x12	; 18
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_write+0xd4>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_write+0xd0>
 24a:	80 95       	com	r24
 24c:	82 23       	and	r24, r18
 24e:	82 bb       	out	0x12, r24	; 18
 250:	08 95       	ret

00000252 <DIO_u8read>:
 252:	82 34       	cpi	r24, 0x42	; 66
 254:	e9 f0       	breq	.+58     	; 0x290 <DIO_u8read+0x3e>
 256:	18 f4       	brcc	.+6      	; 0x25e <DIO_u8read+0xc>
 258:	81 34       	cpi	r24, 0x41	; 65
 25a:	31 f0       	breq	.+12     	; 0x268 <DIO_u8read+0x16>
 25c:	55 c0       	rjmp	.+170    	; 0x308 <DIO_u8read+0xb6>
 25e:	83 34       	cpi	r24, 0x43	; 67
 260:	59 f1       	breq	.+86     	; 0x2b8 <DIO_u8read+0x66>
 262:	84 34       	cpi	r24, 0x44	; 68
 264:	e9 f1       	breq	.+122    	; 0x2e0 <DIO_u8read+0x8e>
 266:	50 c0       	rjmp	.+160    	; 0x308 <DIO_u8read+0xb6>
 268:	49 b3       	in	r20, 0x19	; 25
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	9c 01       	movw	r18, r24
 270:	06 2e       	mov	r0, r22
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_u8read+0x26>
 274:	22 0f       	add	r18, r18
 276:	33 1f       	adc	r19, r19
 278:	0a 94       	dec	r0
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_u8read+0x22>
 27c:	84 2f       	mov	r24, r20
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	82 23       	and	r24, r18
 282:	93 23       	and	r25, r19
 284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_u8read+0x38>
 286:	95 95       	asr	r25
 288:	87 95       	ror	r24
 28a:	6a 95       	dec	r22
 28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_u8read+0x34>
 28e:	08 95       	ret
 290:	46 b3       	in	r20, 0x16	; 22
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	9c 01       	movw	r18, r24
 298:	06 2e       	mov	r0, r22
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <DIO_u8read+0x4e>
 29c:	22 0f       	add	r18, r18
 29e:	33 1f       	adc	r19, r19
 2a0:	0a 94       	dec	r0
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <DIO_u8read+0x4a>
 2a4:	84 2f       	mov	r24, r20
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	82 23       	and	r24, r18
 2aa:	93 23       	and	r25, r19
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <DIO_u8read+0x60>
 2ae:	95 95       	asr	r25
 2b0:	87 95       	ror	r24
 2b2:	6a 95       	dec	r22
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <DIO_u8read+0x5c>
 2b6:	08 95       	ret
 2b8:	43 b3       	in	r20, 0x13	; 19
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	9c 01       	movw	r18, r24
 2c0:	06 2e       	mov	r0, r22
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_u8read+0x76>
 2c4:	22 0f       	add	r18, r18
 2c6:	33 1f       	adc	r19, r19
 2c8:	0a 94       	dec	r0
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_u8read+0x72>
 2cc:	84 2f       	mov	r24, r20
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	82 23       	and	r24, r18
 2d2:	93 23       	and	r25, r19
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <DIO_u8read+0x88>
 2d6:	95 95       	asr	r25
 2d8:	87 95       	ror	r24
 2da:	6a 95       	dec	r22
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <DIO_u8read+0x84>
 2de:	08 95       	ret
 2e0:	40 b3       	in	r20, 0x10	; 16
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	9c 01       	movw	r18, r24
 2e8:	06 2e       	mov	r0, r22
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DIO_u8read+0x9e>
 2ec:	22 0f       	add	r18, r18
 2ee:	33 1f       	adc	r19, r19
 2f0:	0a 94       	dec	r0
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <DIO_u8read+0x9a>
 2f4:	84 2f       	mov	r24, r20
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	82 23       	and	r24, r18
 2fa:	93 23       	and	r25, r19
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <DIO_u8read+0xb0>
 2fe:	95 95       	asr	r25
 300:	87 95       	ror	r24
 302:	6a 95       	dec	r22
 304:	e2 f7       	brpl	.-8      	; 0x2fe <DIO_u8read+0xac>
 306:	08 95       	ret
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	08 95       	ret

0000030c <DIO_write_port>:
 30c:	82 34       	cpi	r24, 0x42	; 66
 30e:	59 f0       	breq	.+22     	; 0x326 <DIO_write_port+0x1a>
 310:	18 f4       	brcc	.+6      	; 0x318 <DIO_write_port+0xc>
 312:	81 34       	cpi	r24, 0x41	; 65
 314:	31 f0       	breq	.+12     	; 0x322 <DIO_write_port+0x16>
 316:	08 95       	ret
 318:	83 34       	cpi	r24, 0x43	; 67
 31a:	39 f0       	breq	.+14     	; 0x32a <DIO_write_port+0x1e>
 31c:	84 34       	cpi	r24, 0x44	; 68
 31e:	39 f0       	breq	.+14     	; 0x32e <DIO_write_port+0x22>
 320:	08 95       	ret
 322:	6b bb       	out	0x1b, r22	; 27
 324:	08 95       	ret
 326:	68 bb       	out	0x18, r22	; 24
 328:	08 95       	ret
 32a:	65 bb       	out	0x15, r22	; 21
 32c:	08 95       	ret
 32e:	62 bb       	out	0x12, r22	; 18
 330:	08 95       	ret

00000332 <DIO_vconnectpullup>:

void DIO_vconnectpullup(char portname ,char pinnumber, char connect_pullup)
{
	switch(portname)
 332:	82 34       	cpi	r24, 0x42	; 66
 334:	19 f1       	breq	.+70     	; 0x37c <DIO_vconnectpullup+0x4a>
 336:	18 f4       	brcc	.+6      	; 0x33e <DIO_vconnectpullup+0xc>
 338:	81 34       	cpi	r24, 0x41	; 65
 33a:	39 f0       	breq	.+14     	; 0x34a <DIO_vconnectpullup+0x18>
 33c:	08 95       	ret
 33e:	83 34       	cpi	r24, 0x43	; 67
 340:	b1 f1       	breq	.+108    	; 0x3ae <DIO_vconnectpullup+0x7c>
 342:	84 34       	cpi	r24, 0x44	; 68
 344:	09 f4       	brne	.+2      	; 0x348 <DIO_vconnectpullup+0x16>
 346:	4c c0       	rjmp	.+152    	; 0x3e0 <DIO_vconnectpullup+0xae>
 348:	08 95       	ret
	{
		case 'A':
		if(connect_pullup==1)
 34a:	41 30       	cpi	r20, 0x01	; 1
 34c:	59 f4       	brne	.+22     	; 0x364 <DIO_vconnectpullup+0x32>
		{
			SET_BIT(PORTA,pinnumber);
 34e:	2b b3       	in	r18, 0x1b	; 27
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	02 c0       	rjmp	.+4      	; 0x35a <DIO_vconnectpullup+0x28>
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	6a 95       	dec	r22
 35c:	e2 f7       	brpl	.-8      	; 0x356 <DIO_vconnectpullup+0x24>
 35e:	82 2b       	or	r24, r18
 360:	8b bb       	out	0x1b, r24	; 27
 362:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
 364:	2b b3       	in	r18, 0x1b	; 27
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_vconnectpullup+0x3e>
 36c:	88 0f       	add	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	6a 95       	dec	r22
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_vconnectpullup+0x3a>
 374:	80 95       	com	r24
 376:	82 23       	and	r24, r18
 378:	8b bb       	out	0x1b, r24	; 27
 37a:	08 95       	ret
		}
		break;
		case 'B':
		if(connect_pullup==1)
 37c:	41 30       	cpi	r20, 0x01	; 1
 37e:	59 f4       	brne	.+22     	; 0x396 <DIO_vconnectpullup+0x64>
		{
			SET_BIT(PORTB,pinnumber);
 380:	28 b3       	in	r18, 0x18	; 24
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_vconnectpullup+0x5a>
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	6a 95       	dec	r22
 38e:	e2 f7       	brpl	.-8      	; 0x388 <DIO_vconnectpullup+0x56>
 390:	82 2b       	or	r24, r18
 392:	88 bb       	out	0x18, r24	; 24
 394:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
 396:	28 b3       	in	r18, 0x18	; 24
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <DIO_vconnectpullup+0x70>
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	6a 95       	dec	r22
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <DIO_vconnectpullup+0x6c>
 3a6:	80 95       	com	r24
 3a8:	82 23       	and	r24, r18
 3aa:	88 bb       	out	0x18, r24	; 24
 3ac:	08 95       	ret
		}
		break;
		case 'C':
		if(connect_pullup==1)
 3ae:	41 30       	cpi	r20, 0x01	; 1
 3b0:	59 f4       	brne	.+22     	; 0x3c8 <DIO_vconnectpullup+0x96>
		{
			SET_BIT(PORTC,pinnumber);
 3b2:	25 b3       	in	r18, 0x15	; 21
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <DIO_vconnectpullup+0x8c>
 3ba:	88 0f       	add	r24, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	6a 95       	dec	r22
 3c0:	e2 f7       	brpl	.-8      	; 0x3ba <DIO_vconnectpullup+0x88>
 3c2:	82 2b       	or	r24, r18
 3c4:	85 bb       	out	0x15, r24	; 21
 3c6:	08 95       	ret
			
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
 3c8:	25 b3       	in	r18, 0x15	; 21
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <DIO_vconnectpullup+0xa2>
 3d0:	88 0f       	add	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	6a 95       	dec	r22
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <DIO_vconnectpullup+0x9e>
 3d8:	80 95       	com	r24
 3da:	82 23       	and	r24, r18
 3dc:	85 bb       	out	0x15, r24	; 21
 3de:	08 95       	ret
		}
		break;
		case 'D':
		if(connect_pullup==1)
 3e0:	41 30       	cpi	r20, 0x01	; 1
 3e2:	59 f4       	brne	.+22     	; 0x3fa <DIO_vconnectpullup+0xc8>
		{
			SET_BIT(PORTD,pinnumber);
 3e4:	22 b3       	in	r18, 0x12	; 18
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <DIO_vconnectpullup+0xbe>
 3ec:	88 0f       	add	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	6a 95       	dec	r22
 3f2:	e2 f7       	brpl	.-8      	; 0x3ec <DIO_vconnectpullup+0xba>
 3f4:	82 2b       	or	r24, r18
 3f6:	82 bb       	out	0x12, r24	; 18
 3f8:	08 95       	ret
			
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
 3fa:	22 b3       	in	r18, 0x12	; 18
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	02 c0       	rjmp	.+4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	6a 95       	dec	r22
 408:	e2 f7       	brpl	.-8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 40a:	80 95       	com	r24
 40c:	82 23       	and	r24, r18
 40e:	82 bb       	out	0x12, r24	; 18
 410:	08 95       	ret

00000412 <EEPROM_write>:
 */ 
#include <avr/io.h>
#include "std_macros.h"
void EEPROM_write(unsigned short address,unsigned char data)
{
	EEAR=address; // set up address register
 412:	9f bb       	out	0x1f, r25	; 31
 414:	8e bb       	out	0x1e, r24	; 30
	EEDR=data;    // set up data register
 416:	6d bb       	out	0x1d, r22	; 29
	SET_BIT(EECR,EEMWE); // write logical one to EEMWE
 418:	8c b3       	in	r24, 0x1c	; 28
 41a:	84 60       	ori	r24, 0x04	; 4
 41c:	8c bb       	out	0x1c, r24	; 28
	SET_BIT(EECR,EEWE);  // write logical one to EEWE
 41e:	8c b3       	in	r24, 0x1c	; 28
 420:	82 60       	ori	r24, 0x02	; 2
 422:	8c bb       	out	0x1c, r24	; 28
	while (READ_BIT(EECR,EEWE)==1); 
 424:	e1 99       	sbic	0x1c, 1	; 28
 426:	fe cf       	rjmp	.-4      	; 0x424 <EEPROM_write+0x12>
}
 428:	08 95       	ret

0000042a <EEPROM_read>:
unsigned char EEPROM_read(unsigned short address)
{
	EEAR=address;
 42a:	9f bb       	out	0x1f, r25	; 31
 42c:	8e bb       	out	0x1e, r24	; 30
	SET_BIT(EECR,EERE);
 42e:	8c b3       	in	r24, 0x1c	; 28
 430:	81 60       	ori	r24, 0x01	; 1
 432:	8c bb       	out	0x1c, r24	; 28
	return EEDR;
 434:	8d b3       	in	r24, 0x1d	; 29
 436:	08 95       	ret

00000438 <keypad_vInit>:
 *  Author: islam ashraf
 */ 
 #include "keypad_driver.h"
 void keypad_vInit()
 {
	 DIO_vsetPINDir('D',0,1);
 438:	41 e0       	ldi	r20, 0x01	; 1
 43a:	60 e0       	ldi	r22, 0x00	; 0
 43c:	84 e4       	ldi	r24, 0x44	; 68
 43e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',1,1);
 442:	41 e0       	ldi	r20, 0x01	; 1
 444:	61 e0       	ldi	r22, 0x01	; 1
 446:	84 e4       	ldi	r24, 0x44	; 68
 448:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',2,1);
 44c:	41 e0       	ldi	r20, 0x01	; 1
 44e:	62 e0       	ldi	r22, 0x02	; 2
 450:	84 e4       	ldi	r24, 0x44	; 68
 452:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',3,1);
 456:	41 e0       	ldi	r20, 0x01	; 1
 458:	63 e0       	ldi	r22, 0x03	; 3
 45a:	84 e4       	ldi	r24, 0x44	; 68
 45c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',4,0);
 460:	40 e0       	ldi	r20, 0x00	; 0
 462:	64 e0       	ldi	r22, 0x04	; 4
 464:	84 e4       	ldi	r24, 0x44	; 68
 466:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',5,0);
 46a:	40 e0       	ldi	r20, 0x00	; 0
 46c:	65 e0       	ldi	r22, 0x05	; 5
 46e:	84 e4       	ldi	r24, 0x44	; 68
 470:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',6,0);
 474:	40 e0       	ldi	r20, 0x00	; 0
 476:	66 e0       	ldi	r22, 0x06	; 6
 478:	84 e4       	ldi	r24, 0x44	; 68
 47a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',7,0);
 47e:	40 e0       	ldi	r20, 0x00	; 0
 480:	67 e0       	ldi	r22, 0x07	; 7
 482:	84 e4       	ldi	r24, 0x44	; 68
 484:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	 DIO_vconnectpullup('D',4,1);
 488:	41 e0       	ldi	r20, 0x01	; 1
 48a:	64 e0       	ldi	r22, 0x04	; 4
 48c:	84 e4       	ldi	r24, 0x44	; 68
 48e:	0e 94 99 01 	call	0x332	; 0x332 <DIO_vconnectpullup>
	 DIO_vconnectpullup('D',5,1);
 492:	41 e0       	ldi	r20, 0x01	; 1
 494:	65 e0       	ldi	r22, 0x05	; 5
 496:	84 e4       	ldi	r24, 0x44	; 68
 498:	0e 94 99 01 	call	0x332	; 0x332 <DIO_vconnectpullup>
	 DIO_vconnectpullup('D',6,1);
 49c:	41 e0       	ldi	r20, 0x01	; 1
 49e:	66 e0       	ldi	r22, 0x06	; 6
 4a0:	84 e4       	ldi	r24, 0x44	; 68
 4a2:	0e 94 99 01 	call	0x332	; 0x332 <DIO_vconnectpullup>
	 DIO_vconnectpullup('D',7,1);
 4a6:	41 e0       	ldi	r20, 0x01	; 1
 4a8:	67 e0       	ldi	r22, 0x07	; 7
 4aa:	84 e4       	ldi	r24, 0x44	; 68
 4ac:	0e 94 99 01 	call	0x332	; 0x332 <DIO_vconnectpullup>
 4b0:	08 95       	ret

000004b2 <keypad_u8check_press>:
	  
 }
 char keypad_u8check_press()
 {
 4b2:	ef 92       	push	r14
 4b4:	ff 92       	push	r15
 4b6:	0f 93       	push	r16
 4b8:	1f 93       	push	r17
 4ba:	cf 93       	push	r28
 4bc:	df 93       	push	r29
 4be:	cd b7       	in	r28, 0x3d	; 61
 4c0:	de b7       	in	r29, 0x3e	; 62
 4c2:	60 97       	sbiw	r28, 0x10	; 16
 4c4:	0f b6       	in	r0, 0x3f	; 63
 4c6:	f8 94       	cli
 4c8:	de bf       	out	0x3e, r29	; 62
 4ca:	0f be       	out	0x3f, r0	; 63
 4cc:	cd bf       	out	0x3d, r28	; 61
	 char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
 4ce:	80 e1       	ldi	r24, 0x10	; 16
 4d0:	e4 e6       	ldi	r30, 0x64	; 100
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	de 01       	movw	r26, r28
 4d6:	11 96       	adiw	r26, 0x01	; 1
 4d8:	01 90       	ld	r0, Z+
 4da:	0d 92       	st	X+, r0
 4dc:	8a 95       	dec	r24
 4de:	e1 f7       	brne	.-8      	; 0x4d8 <keypad_u8check_press+0x26>
	 char row,coloumn,x;
	 char returnval=NOTPRESSED;
 4e0:	ee 24       	eor	r14, r14
 4e2:	ea 94       	dec	r14
	 for(row=0;row<4;row++)
 4e4:	f1 2c       	mov	r15, r1
 4e6:	39 c0       	rjmp	.+114    	; 0x55a <keypad_u8check_press+0xa8>
	 {
		DIO_write('D',0,1);
 4e8:	41 e0       	ldi	r20, 0x01	; 1
 4ea:	60 e0       	ldi	r22, 0x00	; 0
 4ec:	84 e4       	ldi	r24, 0x44	; 68
 4ee:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
		DIO_write('D',1,1);
 4f2:	41 e0       	ldi	r20, 0x01	; 1
 4f4:	61 e0       	ldi	r22, 0x01	; 1
 4f6:	84 e4       	ldi	r24, 0x44	; 68
 4f8:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
		DIO_write('D',2,1);
 4fc:	41 e0       	ldi	r20, 0x01	; 1
 4fe:	62 e0       	ldi	r22, 0x02	; 2
 500:	84 e4       	ldi	r24, 0x44	; 68
 502:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
		DIO_write('D',3,1);
 506:	41 e0       	ldi	r20, 0x01	; 1
 508:	63 e0       	ldi	r22, 0x03	; 3
 50a:	84 e4       	ldi	r24, 0x44	; 68
 50c:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
		DIO_write('D',row,0);
 510:	40 e0       	ldi	r20, 0x00	; 0
 512:	6f 2d       	mov	r22, r15
 514:	84 e4       	ldi	r24, 0x44	; 68
 516:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
	
		for(coloumn=0;coloumn<4;coloumn++)
 51a:	10 e0       	ldi	r17, 0x00	; 0
 51c:	19 c0       	rjmp	.+50     	; 0x550 <keypad_u8check_press+0x9e>
		{
			x=DIO_u8read('D',(coloumn+4));
 51e:	64 e0       	ldi	r22, 0x04	; 4
 520:	61 0f       	add	r22, r17
 522:	84 e4       	ldi	r24, 0x44	; 68
 524:	0e 94 29 01 	call	0x252	; 0x252 <DIO_u8read>
 528:	08 2f       	mov	r16, r24
			if(x==0)
 52a:	81 11       	cpse	r24, r1
 52c:	10 c0       	rjmp	.+32     	; 0x54e <keypad_u8check_press+0x9c>
			 {
				 returnval=arr[row][coloumn];
 52e:	ef 2d       	mov	r30, r15
 530:	f0 e0       	ldi	r31, 0x00	; 0
 532:	ee 0f       	add	r30, r30
 534:	ff 1f       	adc	r31, r31
 536:	ee 0f       	add	r30, r30
 538:	ff 1f       	adc	r31, r31
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	8c 0f       	add	r24, r28
 540:	9d 1f       	adc	r25, r29
 542:	e8 0f       	add	r30, r24
 544:	f9 1f       	adc	r31, r25
 546:	e1 0f       	add	r30, r17
 548:	f1 1d       	adc	r31, r1
 54a:	e0 80       	ld	r14, Z
				 break;
 54c:	03 c0       	rjmp	.+6      	; 0x554 <keypad_u8check_press+0xa2>
		DIO_write('D',1,1);
		DIO_write('D',2,1);
		DIO_write('D',3,1);
		DIO_write('D',row,0);
	
		for(coloumn=0;coloumn<4;coloumn++)
 54e:	1f 5f       	subi	r17, 0xFF	; 255
 550:	14 30       	cpi	r17, 0x04	; 4
 552:	28 f3       	brcs	.-54     	; 0x51e <keypad_u8check_press+0x6c>
			 {
				 returnval=arr[row][coloumn];
				 break;
			 }  
		}	
		if(x==0)
 554:	00 23       	and	r16, r16
 556:	21 f0       	breq	.+8      	; 0x560 <keypad_u8check_press+0xae>
 char keypad_u8check_press()
 {
	 char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	 char row,coloumn,x;
	 char returnval=NOTPRESSED;
	 for(row=0;row<4;row++)
 558:	f3 94       	inc	r15
 55a:	93 e0       	ldi	r25, 0x03	; 3
 55c:	9f 15       	cp	r25, r15
 55e:	20 f6       	brcc	.-120    	; 0x4e8 <keypad_u8check_press+0x36>
		{
			break;
		}
	}	 
	 return returnval ;	 
 560:	8e 2d       	mov	r24, r14
 562:	60 96       	adiw	r28, 0x10	; 16
 564:	0f b6       	in	r0, 0x3f	; 63
 566:	f8 94       	cli
 568:	de bf       	out	0x3e, r29	; 62
 56a:	0f be       	out	0x3f, r0	; 63
 56c:	cd bf       	out	0x3d, r28	; 61
 56e:	df 91       	pop	r29
 570:	cf 91       	pop	r28
 572:	1f 91       	pop	r17
 574:	0f 91       	pop	r16
 576:	ff 90       	pop	r15
 578:	ef 90       	pop	r14
 57a:	08 95       	ret

0000057c <send_falling_edge>:
}


static void send_falling_edge(void)
{
	DIO_write('B',EN,1);
 57c:	41 e0       	ldi	r20, 0x01	; 1
 57e:	60 e0       	ldi	r22, 0x00	; 0
 580:	82 e4       	ldi	r24, 0x42	; 66
 582:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 586:	8f e9       	ldi	r24, 0x9F	; 159
 588:	9f e0       	ldi	r25, 0x0F	; 15
 58a:	01 97       	sbiw	r24, 0x01	; 1
 58c:	f1 f7       	brne	.-4      	; 0x58a <send_falling_edge+0xe>
 58e:	00 c0       	rjmp	.+0      	; 0x590 <send_falling_edge+0x14>
 590:	00 00       	nop
	_delay_ms(2);
	DIO_write('B',EN,0);
 592:	40 e0       	ldi	r20, 0x00	; 0
 594:	60 e0       	ldi	r22, 0x00	; 0
 596:	82 e4       	ldi	r24, 0x42	; 66
 598:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
 59c:	8f e9       	ldi	r24, 0x9F	; 159
 59e:	9f e0       	ldi	r25, 0x0F	; 15
 5a0:	01 97       	sbiw	r24, 0x01	; 1
 5a2:	f1 f7       	brne	.-4      	; 0x5a0 <send_falling_edge+0x24>
 5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <send_falling_edge+0x2a>
 5a6:	00 00       	nop
 5a8:	08 95       	ret

000005aa <LCD_vSend_cmd>:
	_delay_ms(2);
}
void LCD_vSend_cmd(char cmd)
{
	#if defined eight_bits_mode
	DIO_write_port('A',cmd);
 5aa:	68 2f       	mov	r22, r24
 5ac:	81 e4       	ldi	r24, 0x41	; 65
 5ae:	0e 94 86 01 	call	0x30c	; 0x30c <DIO_write_port>
	DIO_write('B',RS,0);
 5b2:	40 e0       	ldi	r20, 0x00	; 0
 5b4:	61 e0       	ldi	r22, 0x01	; 1
 5b6:	82 e4       	ldi	r24, 0x42	; 66
 5b8:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
	send_falling_edge();
 5bc:	0e 94 be 02 	call	0x57c	; 0x57c <send_falling_edge>
 5c0:	8f ec       	ldi	r24, 0xCF	; 207
 5c2:	97 e0       	ldi	r25, 0x07	; 7
 5c4:	01 97       	sbiw	r24, 0x01	; 1
 5c6:	f1 f7       	brne	.-4      	; 0x5c4 <LCD_vSend_cmd+0x1a>
 5c8:	00 c0       	rjmp	.+0      	; 0x5ca <LCD_vSend_cmd+0x20>
 5ca:	00 00       	nop
 5cc:	08 95       	ret

000005ce <LCD_vInit>:
 5ce:	2f ef       	ldi	r18, 0xFF	; 255
 5d0:	81 ee       	ldi	r24, 0xE1	; 225
 5d2:	94 e0       	ldi	r25, 0x04	; 4
 5d4:	21 50       	subi	r18, 0x01	; 1
 5d6:	80 40       	sbci	r24, 0x00	; 0
 5d8:	90 40       	sbci	r25, 0x00	; 0
 5da:	e1 f7       	brne	.-8      	; 0x5d4 <LCD_vInit+0x6>
 5dc:	00 c0       	rjmp	.+0      	; 0x5de <LCD_vInit+0x10>
 5de:	00 00       	nop

void LCD_vInit(void)
{
	_delay_ms(200);
	#if defined eight_bits_mode
	DIO_vsetPINDir('A',0,1);
 5e0:	41 e0       	ldi	r20, 0x01	; 1
 5e2:	60 e0       	ldi	r22, 0x00	; 0
 5e4:	81 e4       	ldi	r24, 0x41	; 65
 5e6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',1,1);
 5ea:	41 e0       	ldi	r20, 0x01	; 1
 5ec:	61 e0       	ldi	r22, 0x01	; 1
 5ee:	81 e4       	ldi	r24, 0x41	; 65
 5f0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',2,1);
 5f4:	41 e0       	ldi	r20, 0x01	; 1
 5f6:	62 e0       	ldi	r22, 0x02	; 2
 5f8:	81 e4       	ldi	r24, 0x41	; 65
 5fa:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',3,1);
 5fe:	41 e0       	ldi	r20, 0x01	; 1
 600:	63 e0       	ldi	r22, 0x03	; 3
 602:	81 e4       	ldi	r24, 0x41	; 65
 604:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',4,1);
 608:	41 e0       	ldi	r20, 0x01	; 1
 60a:	64 e0       	ldi	r22, 0x04	; 4
 60c:	81 e4       	ldi	r24, 0x41	; 65
 60e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',5,1);
 612:	41 e0       	ldi	r20, 0x01	; 1
 614:	65 e0       	ldi	r22, 0x05	; 5
 616:	81 e4       	ldi	r24, 0x41	; 65
 618:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',6,1);
 61c:	41 e0       	ldi	r20, 0x01	; 1
 61e:	66 e0       	ldi	r22, 0x06	; 6
 620:	81 e4       	ldi	r24, 0x41	; 65
 622:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',7,1);
 626:	41 e0       	ldi	r20, 0x01	; 1
 628:	67 e0       	ldi	r22, 0x07	; 7
 62a:	81 e4       	ldi	r24, 0x41	; 65
 62c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',EN,1);
 630:	41 e0       	ldi	r20, 0x01	; 1
 632:	60 e0       	ldi	r22, 0x00	; 0
 634:	82 e4       	ldi	r24, 0x42	; 66
 636:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RW,1);
 63a:	41 e0       	ldi	r20, 0x01	; 1
 63c:	62 e0       	ldi	r22, 0x02	; 2
 63e:	82 e4       	ldi	r24, 0x42	; 66
 640:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RS,1);
 644:	41 e0       	ldi	r20, 0x01	; 1
 646:	61 e0       	ldi	r22, 0x01	; 1
 648:	82 e4       	ldi	r24, 0x42	; 66
 64a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_write('B',RW,0);
 64e:	40 e0       	ldi	r20, 0x00	; 0
 650:	62 e0       	ldi	r22, 0x02	; 2
 652:	82 e4       	ldi	r24, 0x42	; 66
 654:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
	LCD_vSend_cmd(EIGHT_BITS); //8 bit mode
 658:	88 e3       	ldi	r24, 0x38	; 56
 65a:	0e 94 d5 02 	call	0x5aa	; 0x5aa <LCD_vSend_cmd>
 65e:	8f ec       	ldi	r24, 0xCF	; 207
 660:	97 e0       	ldi	r25, 0x07	; 7
 662:	01 97       	sbiw	r24, 0x01	; 1
 664:	f1 f7       	brne	.-4      	; 0x662 <LCD_vInit+0x94>
 666:	00 c0       	rjmp	.+0      	; 0x668 <LCD_vInit+0x9a>
 668:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CURSOR_ON_DISPLAN_ON);//display on cursor on
 66a:	8e e0       	ldi	r24, 0x0E	; 14
 66c:	0e 94 d5 02 	call	0x5aa	; 0x5aa <LCD_vSend_cmd>
 670:	8f ec       	ldi	r24, 0xCF	; 207
 672:	97 e0       	ldi	r25, 0x07	; 7
 674:	01 97       	sbiw	r24, 0x01	; 1
 676:	f1 f7       	brne	.-4      	; 0x674 <LCD_vInit+0xa6>
 678:	00 c0       	rjmp	.+0      	; 0x67a <LCD_vInit+0xac>
 67a:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CLR_SCREEN);//clear the screen
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	0e 94 d5 02 	call	0x5aa	; 0x5aa <LCD_vSend_cmd>
 682:	8f e1       	ldi	r24, 0x1F	; 31
 684:	9e e4       	ldi	r25, 0x4E	; 78
 686:	01 97       	sbiw	r24, 0x01	; 1
 688:	f1 f7       	brne	.-4      	; 0x686 <LCD_vInit+0xb8>
 68a:	00 c0       	rjmp	.+0      	; 0x68c <LCD_vInit+0xbe>
 68c:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
 68e:	86 e0       	ldi	r24, 0x06	; 6
 690:	0e 94 d5 02 	call	0x5aa	; 0x5aa <LCD_vSend_cmd>
 694:	8f ec       	ldi	r24, 0xCF	; 207
 696:	97 e0       	ldi	r25, 0x07	; 7
 698:	01 97       	sbiw	r24, 0x01	; 1
 69a:	f1 f7       	brne	.-4      	; 0x698 <LCD_vInit+0xca>
 69c:	00 c0       	rjmp	.+0      	; 0x69e <LCD_vInit+0xd0>
 69e:	00 00       	nop
 6a0:	08 95       	ret

000006a2 <LCD_vSend_char>:
}

void LCD_vSend_char(char data)
{
	#if defined eight_bits_mode
	DIO_write_port('A',data);
 6a2:	68 2f       	mov	r22, r24
 6a4:	81 e4       	ldi	r24, 0x41	; 65
 6a6:	0e 94 86 01 	call	0x30c	; 0x30c <DIO_write_port>
	DIO_write('B',RS,1);
 6aa:	41 e0       	ldi	r20, 0x01	; 1
 6ac:	61 e0       	ldi	r22, 0x01	; 1
 6ae:	82 e4       	ldi	r24, 0x42	; 66
 6b0:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
	send_falling_edge();
 6b4:	0e 94 be 02 	call	0x57c	; 0x57c <send_falling_edge>
 6b8:	8f ec       	ldi	r24, 0xCF	; 207
 6ba:	97 e0       	ldi	r25, 0x07	; 7
 6bc:	01 97       	sbiw	r24, 0x01	; 1
 6be:	f1 f7       	brne	.-4      	; 0x6bc <LCD_vSend_char+0x1a>
 6c0:	00 c0       	rjmp	.+0      	; 0x6c2 <LCD_vSend_char+0x20>
 6c2:	00 00       	nop
 6c4:	08 95       	ret

000006c6 <LCD_vSend_string>:
	_delay_ms(1);
}


void LCD_vSend_string(char *data)
{
 6c6:	cf 93       	push	r28
 6c8:	df 93       	push	r29
 6ca:	ec 01       	movw	r28, r24
	while((*data)!='\0')
 6cc:	03 c0       	rjmp	.+6      	; 0x6d4 <LCD_vSend_string+0xe>
	{
		LCD_vSend_char(*data);
 6ce:	0e 94 51 03 	call	0x6a2	; 0x6a2 <LCD_vSend_char>
		data++;
 6d2:	21 96       	adiw	r28, 0x01	; 1
}


void LCD_vSend_string(char *data)
{
	while((*data)!='\0')
 6d4:	88 81       	ld	r24, Y
 6d6:	81 11       	cpse	r24, r1
 6d8:	fa cf       	rjmp	.-12     	; 0x6ce <LCD_vSend_string+0x8>
	{
		LCD_vSend_char(*data);
		data++;
	}
}
 6da:	df 91       	pop	r29
 6dc:	cf 91       	pop	r28
 6de:	08 95       	ret

000006e0 <LCD_clearscreen>:
void LCD_clearscreen()
{
	LCD_vSend_cmd(CLR_SCREEN);
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	0e 94 d5 02 	call	0x5aa	; 0x5aa <LCD_vSend_cmd>
 6e6:	8f e1       	ldi	r24, 0x1F	; 31
 6e8:	9e e4       	ldi	r25, 0x4E	; 78
 6ea:	01 97       	sbiw	r24, 0x01	; 1
 6ec:	f1 f7       	brne	.-4      	; 0x6ea <LCD_clearscreen+0xa>
 6ee:	00 c0       	rjmp	.+0      	; 0x6f0 <LCD_clearscreen+0x10>
 6f0:	00 00       	nop
 6f2:	08 95       	ret

000006f4 <LCD_movecursor>:
	_delay_ms(10);
}
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
 6f4:	9f ef       	ldi	r25, 0xFF	; 255
 6f6:	98 0f       	add	r25, r24
 6f8:	92 30       	cpi	r25, 0x02	; 2
 6fa:	70 f4       	brcc	.+28     	; 0x718 <LCD_movecursor+0x24>
 6fc:	61 31       	cpi	r22, 0x11	; 17
 6fe:	70 f4       	brcc	.+28     	; 0x71c <LCD_movecursor+0x28>
 700:	66 23       	and	r22, r22
 702:	71 f0       	breq	.+28     	; 0x720 <LCD_movecursor+0x2c>
	{
		data=0x80;
	}
	else if(row==1)
 704:	81 30       	cpi	r24, 0x01	; 1
 706:	19 f4       	brne	.+6      	; 0x70e <LCD_movecursor+0x1a>
	{
		data=0x80+coloumn-1 ;
 708:	2f e7       	ldi	r18, 0x7F	; 127
 70a:	26 0f       	add	r18, r22
 70c:	0a c0       	rjmp	.+20     	; 0x722 <LCD_movecursor+0x2e>
	}
	else if (row==2)
 70e:	82 30       	cpi	r24, 0x02	; 2
 710:	41 f4       	brne	.+16     	; 0x722 <LCD_movecursor+0x2e>
	{
		data=0xc0+coloumn-1;
 712:	2f eb       	ldi	r18, 0xBF	; 191
 714:	26 0f       	add	r18, r22
 716:	05 c0       	rjmp	.+10     	; 0x722 <LCD_movecursor+0x2e>
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
	{
		data=0x80;
 718:	20 e8       	ldi	r18, 0x80	; 128
 71a:	03 c0       	rjmp	.+6      	; 0x722 <LCD_movecursor+0x2e>
 71c:	20 e8       	ldi	r18, 0x80	; 128
 71e:	01 c0       	rjmp	.+2      	; 0x722 <LCD_movecursor+0x2e>
 720:	20 e8       	ldi	r18, 0x80	; 128
	}
	else if (row==2)
	{
		data=0xc0+coloumn-1;
	}
	LCD_vSend_cmd(data);
 722:	82 2f       	mov	r24, r18
 724:	0e 94 d5 02 	call	0x5aa	; 0x5aa <LCD_vSend_cmd>
 728:	8f ec       	ldi	r24, 0xCF	; 207
 72a:	97 e0       	ldi	r25, 0x07	; 7
 72c:	01 97       	sbiw	r24, 0x01	; 1
 72e:	f1 f7       	brne	.-4      	; 0x72c <LCD_movecursor+0x38>
 730:	00 c0       	rjmp	.+0      	; 0x732 <LCD_movecursor+0x3e>
 732:	00 00       	nop
 734:	08 95       	ret

00000736 <main>:
char arr[4],tries=3;
char value=NOTPRESSED,value2=NOTPRESSED;
char keypad_value=NOTPRESSED;
int main(void)
{
   LCD_vInit();
 736:	0e 94 e7 02 	call	0x5ce	; 0x5ce <LCD_vInit>
   keypad_vInit();
 73a:	0e 94 1c 02 	call	0x438	; 0x438 <keypad_vInit>
   if (EEPROM_read( EEPROM_STATUS_LOCATION)==NOTPRESSED)
 73e:	80 e2       	ldi	r24, 0x20	; 32
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	0e 94 15 02 	call	0x42a	; 0x42a <EEPROM_read>
 746:	8f 3f       	cpi	r24, 0xFF	; 255
 748:	d1 f5       	brne	.+116    	; 0x7be <main+0x88>
   {
	   LCD_clearscreen();
 74a:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCD_clearscreen>
	    LCD_vSend_string("set pass: ");
 74e:	84 e7       	ldi	r24, 0x74	; 116
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	0e 94 63 03 	call	0x6c6	; 0x6c6 <LCD_vSend_string>
	    for (int count=0;count<4;count++)
 756:	c0 e0       	ldi	r28, 0x00	; 0
 758:	d0 e0       	ldi	r29, 0x00	; 0
 75a:	29 c0       	rjmp	.+82     	; 0x7ae <main+0x78>
	    {
		    do
		    {
			    value2=keypad_u8check_press();
 75c:	0e 94 59 02 	call	0x4b2	; 0x4b2 <keypad_u8check_press>
 760:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <value2>
		    }while(value2==NOTPRESSED);
 764:	8f 3f       	cpi	r24, 0xFF	; 255
 766:	d1 f3       	breq	.-12     	; 0x75c <main+0x26>
		    LCD_vSend_char(value2);
 768:	0e 94 51 03 	call	0x6a2	; 0x6a2 <LCD_vSend_char>
 76c:	2f ef       	ldi	r18, 0xFF	; 255
 76e:	84 e3       	ldi	r24, 0x34	; 52
 770:	9c e0       	ldi	r25, 0x0C	; 12
 772:	21 50       	subi	r18, 0x01	; 1
 774:	80 40       	sbci	r24, 0x00	; 0
 776:	90 40       	sbci	r25, 0x00	; 0
 778:	e1 f7       	brne	.-8      	; 0x772 <main+0x3c>
 77a:	00 c0       	rjmp	.+0      	; 0x77c <main+0x46>
 77c:	00 00       	nop
		    _delay_ms(500);
		    LCD_movecursor(1,11+count);
 77e:	6c 2f       	mov	r22, r28
 780:	65 5f       	subi	r22, 0xF5	; 245
 782:	81 e0       	ldi	r24, 0x01	; 1
 784:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCD_movecursor>
		    LCD_vSend_char('*');
 788:	8a e2       	ldi	r24, 0x2A	; 42
 78a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <LCD_vSend_char>
 78e:	2f ef       	ldi	r18, 0xFF	; 255
 790:	84 e3       	ldi	r24, 0x34	; 52
 792:	9c e0       	ldi	r25, 0x0C	; 12
 794:	21 50       	subi	r18, 0x01	; 1
 796:	80 40       	sbci	r24, 0x00	; 0
 798:	90 40       	sbci	r25, 0x00	; 0
 79a:	e1 f7       	brne	.-8      	; 0x794 <main+0x5e>
 79c:	00 c0       	rjmp	.+0      	; 0x79e <main+0x68>
 79e:	00 00       	nop
		    _delay_ms(500);
		    EEPROM_write( EEPROM_PASSWORD_LOCATION1+count,value2);
 7a0:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <value2>
 7a4:	ce 01       	movw	r24, r28
 7a6:	81 96       	adiw	r24, 0x21	; 33
 7a8:	0e 94 09 02 	call	0x412	; 0x412 <EEPROM_write>
   keypad_vInit();
   if (EEPROM_read( EEPROM_STATUS_LOCATION)==NOTPRESSED)
   {
	   LCD_clearscreen();
	    LCD_vSend_string("set pass: ");
	    for (int count=0;count<4;count++)
 7ac:	21 96       	adiw	r28, 0x01	; 1
 7ae:	c4 30       	cpi	r28, 0x04	; 4
 7b0:	d1 05       	cpc	r29, r1
 7b2:	a4 f2       	brlt	.-88     	; 0x75c <main+0x26>
		    LCD_movecursor(1,11+count);
		    LCD_vSend_char('*');
		    _delay_ms(500);
		    EEPROM_write( EEPROM_PASSWORD_LOCATION1+count,value2);
	    }
		 EEPROM_write(EEPROM_STATUS_LOCATION ,0x00);
 7b4:	60 e0       	ldi	r22, 0x00	; 0
 7b6:	80 e2       	ldi	r24, 0x20	; 32
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	0e 94 09 02 	call	0x412	; 0x412 <EEPROM_write>
   }
   while(1)
   {
   LCD_clearscreen();
 7be:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCD_clearscreen>
   LCD_vSend_string("1-check pass");
 7c2:	8f e7       	ldi	r24, 0x7F	; 127
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	0e 94 63 03 	call	0x6c6	; 0x6c6 <LCD_vSend_string>
   LCD_movecursor(2,1);
 7ca:	61 e0       	ldi	r22, 0x01	; 1
 7cc:	82 e0       	ldi	r24, 0x02	; 2
 7ce:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCD_movecursor>
   LCD_vSend_string("2-edit");
 7d2:	8c e8       	ldi	r24, 0x8C	; 140
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	0e 94 63 03 	call	0x6c6	; 0x6c6 <LCD_vSend_string>
   do{
	    keypad_value=keypad_u8check_press();
 7da:	0e 94 59 02 	call	0x4b2	; 0x4b2 <keypad_u8check_press>
 7de:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    }while( keypad_value==NOTPRESSED);
 7e2:	8f 3f       	cpi	r24, 0xFF	; 255
 7e4:	d1 f3       	breq	.-12     	; 0x7da <main+0xa4>
 7e6:	2f ef       	ldi	r18, 0xFF	; 255
 7e8:	82 e5       	ldi	r24, 0x52	; 82
 7ea:	97 e0       	ldi	r25, 0x07	; 7
 7ec:	21 50       	subi	r18, 0x01	; 1
 7ee:	80 40       	sbci	r24, 0x00	; 0
 7f0:	90 40       	sbci	r25, 0x00	; 0
 7f2:	e1 f7       	brne	.-8      	; 0x7ec <main+0xb6>
 7f4:	00 c0       	rjmp	.+0      	; 0x7f6 <main+0xc0>
 7f6:	00 00       	nop
    _delay_ms(300);
  if (keypad_value=='2')
 7f8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 7fc:	82 33       	cpi	r24, 0x32	; 50
 7fe:	09 f0       	breq	.+2      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 800:	97 c0       	rjmp	.+302    	; 0x930 <__stack+0xd1>
   {
	    LCD_clearscreen();
 802:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCD_clearscreen>
	    LCD_vSend_string("check pass: ");
 806:	83 e9       	ldi	r24, 0x93	; 147
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	0e 94 63 03 	call	0x6c6	; 0x6c6 <LCD_vSend_string>
	    for (int count=0;count<4;count++)
 80e:	c0 e0       	ldi	r28, 0x00	; 0
 810:	d0 e0       	ldi	r29, 0x00	; 0
 812:	25 c0       	rjmp	.+74     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
	    {
		    do
		    {
			    arr[count]=keypad_u8check_press();
 814:	0e 94 59 02 	call	0x4b2	; 0x4b2 <keypad_u8check_press>
 818:	fe 01       	movw	r30, r28
 81a:	e2 51       	subi	r30, 0x12	; 18
 81c:	ff 4f       	sbci	r31, 0xFF	; 255
 81e:	80 83       	st	Z, r24
		    }while(arr[count]==NOTPRESSED);
 820:	8f 3f       	cpi	r24, 0xFF	; 255
 822:	c1 f3       	breq	.-16     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
		    LCD_vSend_char(arr[count]);
 824:	0e 94 51 03 	call	0x6a2	; 0x6a2 <LCD_vSend_char>
 828:	2f ef       	ldi	r18, 0xFF	; 255
 82a:	84 e3       	ldi	r24, 0x34	; 52
 82c:	9c e0       	ldi	r25, 0x0C	; 12
 82e:	21 50       	subi	r18, 0x01	; 1
 830:	80 40       	sbci	r24, 0x00	; 0
 832:	90 40       	sbci	r25, 0x00	; 0
 834:	e1 f7       	brne	.-8      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 836:	00 c0       	rjmp	.+0      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 838:	00 00       	nop
		    _delay_ms(500);
		    LCD_movecursor(1,count+13);
 83a:	6c 2f       	mov	r22, r28
 83c:	63 5f       	subi	r22, 0xF3	; 243
 83e:	81 e0       	ldi	r24, 0x01	; 1
 840:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCD_movecursor>
		    LCD_vSend_char('*');
 844:	8a e2       	ldi	r24, 0x2A	; 42
 846:	0e 94 51 03 	call	0x6a2	; 0x6a2 <LCD_vSend_char>
 84a:	2f ef       	ldi	r18, 0xFF	; 255
 84c:	84 e3       	ldi	r24, 0x34	; 52
 84e:	9c e0       	ldi	r25, 0x0C	; 12
 850:	21 50       	subi	r18, 0x01	; 1
 852:	80 40       	sbci	r24, 0x00	; 0
 854:	90 40       	sbci	r25, 0x00	; 0
 856:	e1 f7       	brne	.-8      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 858:	00 c0       	rjmp	.+0      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 85a:	00 00       	nop
    _delay_ms(300);
  if (keypad_value=='2')
   {
	    LCD_clearscreen();
	    LCD_vSend_string("check pass: ");
	    for (int count=0;count<4;count++)
 85c:	21 96       	adiw	r28, 0x01	; 1
 85e:	c4 30       	cpi	r28, 0x04	; 4
 860:	d1 05       	cpc	r29, r1
 862:	c4 f2       	brlt	.-80     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
		    _delay_ms(500);
		    LCD_movecursor(1,count+13);
		    LCD_vSend_char('*');
		    _delay_ms(500);
	    }
	    if (EEPROM_read(EEPROM_PASSWORD_LOCATION1)==arr[0]&&EEPROM_read(EEPROM_PASSWORD_LOCATION2)==arr[1]&&EEPROM_read(EEPROM_PASSWORD_LOCATION3)==arr[2]&&EEPROM_read(EEPROM_PASSWORD_LOCATION4)==arr[3])
 864:	81 e2       	ldi	r24, 0x21	; 33
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	0e 94 15 02 	call	0x42a	; 0x42a <EEPROM_read>
 86c:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__data_end>
 870:	89 13       	cpse	r24, r25
 872:	4e c0       	rjmp	.+156    	; 0x910 <__stack+0xb1>
 874:	82 e2       	ldi	r24, 0x22	; 34
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	0e 94 15 02 	call	0x42a	; 0x42a <EEPROM_read>
 87c:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__data_end+0x1>
 880:	89 13       	cpse	r24, r25
 882:	46 c0       	rjmp	.+140    	; 0x910 <__stack+0xb1>
 884:	83 e2       	ldi	r24, 0x23	; 35
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	0e 94 15 02 	call	0x42a	; 0x42a <EEPROM_read>
 88c:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <__data_end+0x2>
 890:	89 13       	cpse	r24, r25
 892:	3e c0       	rjmp	.+124    	; 0x910 <__stack+0xb1>
 894:	84 e2       	ldi	r24, 0x24	; 36
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	0e 94 15 02 	call	0x42a	; 0x42a <EEPROM_read>
 89c:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__data_end+0x3>
 8a0:	89 13       	cpse	r24, r25
 8a2:	36 c0       	rjmp	.+108    	; 0x910 <__stack+0xb1>
	    {
		     LCD_clearscreen();
 8a4:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCD_clearscreen>
		     LCD_vSend_string("set pass: ");
 8a8:	84 e7       	ldi	r24, 0x74	; 116
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	0e 94 63 03 	call	0x6c6	; 0x6c6 <LCD_vSend_string>
		     for (int count=0;count<4;count++)
 8b0:	c0 e0       	ldi	r28, 0x00	; 0
 8b2:	d0 e0       	ldi	r29, 0x00	; 0
 8b4:	29 c0       	rjmp	.+82     	; 0x908 <__stack+0xa9>
		     {
			     do
			     {
				     value=keypad_u8check_press();
 8b6:	0e 94 59 02 	call	0x4b2	; 0x4b2 <keypad_u8check_press>
 8ba:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <value>
			     }while(value==NOTPRESSED);
 8be:	8f 3f       	cpi	r24, 0xFF	; 255
 8c0:	d1 f3       	breq	.-12     	; 0x8b6 <__stack+0x57>
			     LCD_vSend_char(value);
 8c2:	0e 94 51 03 	call	0x6a2	; 0x6a2 <LCD_vSend_char>
 8c6:	2f ef       	ldi	r18, 0xFF	; 255
 8c8:	84 e3       	ldi	r24, 0x34	; 52
 8ca:	9c e0       	ldi	r25, 0x0C	; 12
 8cc:	21 50       	subi	r18, 0x01	; 1
 8ce:	80 40       	sbci	r24, 0x00	; 0
 8d0:	90 40       	sbci	r25, 0x00	; 0
 8d2:	e1 f7       	brne	.-8      	; 0x8cc <__stack+0x6d>
 8d4:	00 c0       	rjmp	.+0      	; 0x8d6 <__stack+0x77>
 8d6:	00 00       	nop
			     _delay_ms(500);
			     LCD_movecursor(1,11+count);
 8d8:	6c 2f       	mov	r22, r28
 8da:	65 5f       	subi	r22, 0xF5	; 245
 8dc:	81 e0       	ldi	r24, 0x01	; 1
 8de:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCD_movecursor>
			     LCD_vSend_char('*');
 8e2:	8a e2       	ldi	r24, 0x2A	; 42
 8e4:	0e 94 51 03 	call	0x6a2	; 0x6a2 <LCD_vSend_char>
 8e8:	2f ef       	ldi	r18, 0xFF	; 255
 8ea:	84 e3       	ldi	r24, 0x34	; 52
 8ec:	9c e0       	ldi	r25, 0x0C	; 12
 8ee:	21 50       	subi	r18, 0x01	; 1
 8f0:	80 40       	sbci	r24, 0x00	; 0
 8f2:	90 40       	sbci	r25, 0x00	; 0
 8f4:	e1 f7       	brne	.-8      	; 0x8ee <__stack+0x8f>
 8f6:	00 c0       	rjmp	.+0      	; 0x8f8 <__stack+0x99>
 8f8:	00 00       	nop
			     _delay_ms(500);
			     EEPROM_write( EEPROM_PASSWORD_LOCATION1+count,value);
 8fa:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <value>
 8fe:	ce 01       	movw	r24, r28
 900:	81 96       	adiw	r24, 0x21	; 33
 902:	0e 94 09 02 	call	0x412	; 0x412 <EEPROM_write>
	    }
	    if (EEPROM_read(EEPROM_PASSWORD_LOCATION1)==arr[0]&&EEPROM_read(EEPROM_PASSWORD_LOCATION2)==arr[1]&&EEPROM_read(EEPROM_PASSWORD_LOCATION3)==arr[2]&&EEPROM_read(EEPROM_PASSWORD_LOCATION4)==arr[3])
	    {
		     LCD_clearscreen();
		     LCD_vSend_string("set pass: ");
		     for (int count=0;count<4;count++)
 906:	21 96       	adiw	r28, 0x01	; 1
 908:	c4 30       	cpi	r28, 0x04	; 4
 90a:	d1 05       	cpc	r29, r1
 90c:	a4 f2       	brlt	.-88     	; 0x8b6 <__stack+0x57>
 90e:	57 cf       	rjmp	.-338    	; 0x7be <main+0x88>
			     EEPROM_write( EEPROM_PASSWORD_LOCATION1+count,value);
		     }
	    }
		else  
		{
			LCD_clearscreen();
 910:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCD_clearscreen>
	        LCD_vSend_string("wrong pass");
 914:	80 ea       	ldi	r24, 0xA0	; 160
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	0e 94 63 03 	call	0x6c6	; 0x6c6 <LCD_vSend_string>
 91c:	2f ef       	ldi	r18, 0xFF	; 255
 91e:	83 ed       	ldi	r24, 0xD3	; 211
 920:	90 e3       	ldi	r25, 0x30	; 48
 922:	21 50       	subi	r18, 0x01	; 1
 924:	80 40       	sbci	r24, 0x00	; 0
 926:	90 40       	sbci	r25, 0x00	; 0
 928:	e1 f7       	brne	.-8      	; 0x922 <__stack+0xc3>
 92a:	00 c0       	rjmp	.+0      	; 0x92c <__stack+0xcd>
 92c:	00 00       	nop
 92e:	47 cf       	rjmp	.-370    	; 0x7be <main+0x88>
			_delay_ms(2000);
		}
	   
  }
 
   else if (keypad_value=='1')
 930:	81 33       	cpi	r24, 0x31	; 49
 932:	09 f0       	breq	.+2      	; 0x936 <__stack+0xd7>
 934:	44 cf       	rjmp	.-376    	; 0x7be <main+0x88>
   {
		    LCD_clearscreen();
 936:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCD_clearscreen>
	        LCD_vSend_string("check pass: ");
 93a:	83 e9       	ldi	r24, 0x93	; 147
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	0e 94 63 03 	call	0x6c6	; 0x6c6 <LCD_vSend_string>
			for (int count=0;count<4;count++)
 942:	c0 e0       	ldi	r28, 0x00	; 0
 944:	d0 e0       	ldi	r29, 0x00	; 0
 946:	25 c0       	rjmp	.+74     	; 0x992 <__stack+0x133>
			{
				 do
				 {
					 arr[count]=keypad_u8check_press();
 948:	0e 94 59 02 	call	0x4b2	; 0x4b2 <keypad_u8check_press>
 94c:	fe 01       	movw	r30, r28
 94e:	e2 51       	subi	r30, 0x12	; 18
 950:	ff 4f       	sbci	r31, 0xFF	; 255
 952:	80 83       	st	Z, r24
				 }while(arr[count]==NOTPRESSED);
 954:	8f 3f       	cpi	r24, 0xFF	; 255
 956:	c1 f3       	breq	.-16     	; 0x948 <__stack+0xe9>
				  LCD_vSend_char(arr[count]);
 958:	0e 94 51 03 	call	0x6a2	; 0x6a2 <LCD_vSend_char>
 95c:	2f ef       	ldi	r18, 0xFF	; 255
 95e:	84 e3       	ldi	r24, 0x34	; 52
 960:	9c e0       	ldi	r25, 0x0C	; 12
 962:	21 50       	subi	r18, 0x01	; 1
 964:	80 40       	sbci	r24, 0x00	; 0
 966:	90 40       	sbci	r25, 0x00	; 0
 968:	e1 f7       	brne	.-8      	; 0x962 <__stack+0x103>
 96a:	00 c0       	rjmp	.+0      	; 0x96c <__stack+0x10d>
 96c:	00 00       	nop
				  _delay_ms(500);
				   LCD_movecursor(1,count+13);
 96e:	6c 2f       	mov	r22, r28
 970:	63 5f       	subi	r22, 0xF3	; 243
 972:	81 e0       	ldi	r24, 0x01	; 1
 974:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCD_movecursor>
				  LCD_vSend_char('*');
 978:	8a e2       	ldi	r24, 0x2A	; 42
 97a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <LCD_vSend_char>
 97e:	2f ef       	ldi	r18, 0xFF	; 255
 980:	84 e3       	ldi	r24, 0x34	; 52
 982:	9c e0       	ldi	r25, 0x0C	; 12
 984:	21 50       	subi	r18, 0x01	; 1
 986:	80 40       	sbci	r24, 0x00	; 0
 988:	90 40       	sbci	r25, 0x00	; 0
 98a:	e1 f7       	brne	.-8      	; 0x984 <__stack+0x125>
 98c:	00 c0       	rjmp	.+0      	; 0x98e <__stack+0x12f>
 98e:	00 00       	nop
 
   else if (keypad_value=='1')
   {
		    LCD_clearscreen();
	        LCD_vSend_string("check pass: ");
			for (int count=0;count<4;count++)
 990:	21 96       	adiw	r28, 0x01	; 1
 992:	c4 30       	cpi	r28, 0x04	; 4
 994:	d1 05       	cpc	r29, r1
 996:	c4 f2       	brlt	.-80     	; 0x948 <__stack+0xe9>
				  _delay_ms(500);
				   LCD_movecursor(1,count+13);
				  LCD_vSend_char('*');
				  _delay_ms(500); 
			}
			if (EEPROM_read(EEPROM_PASSWORD_LOCATION1)==arr[0]&&EEPROM_read(EEPROM_PASSWORD_LOCATION2)==arr[1]&&EEPROM_read(EEPROM_PASSWORD_LOCATION3)==arr[2]&&EEPROM_read(EEPROM_PASSWORD_LOCATION4)==arr[3])
 998:	81 e2       	ldi	r24, 0x21	; 33
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	0e 94 15 02 	call	0x42a	; 0x42a <EEPROM_read>
 9a0:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__data_end>
 9a4:	89 13       	cpse	r24, r25
 9a6:	30 c0       	rjmp	.+96     	; 0xa08 <__stack+0x1a9>
 9a8:	82 e2       	ldi	r24, 0x22	; 34
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	0e 94 15 02 	call	0x42a	; 0x42a <EEPROM_read>
 9b0:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__data_end+0x1>
 9b4:	89 13       	cpse	r24, r25
 9b6:	28 c0       	rjmp	.+80     	; 0xa08 <__stack+0x1a9>
 9b8:	83 e2       	ldi	r24, 0x23	; 35
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	0e 94 15 02 	call	0x42a	; 0x42a <EEPROM_read>
 9c0:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <__data_end+0x2>
 9c4:	89 13       	cpse	r24, r25
 9c6:	20 c0       	rjmp	.+64     	; 0xa08 <__stack+0x1a9>
 9c8:	84 e2       	ldi	r24, 0x24	; 36
 9ca:	90 e0       	ldi	r25, 0x00	; 0
 9cc:	0e 94 15 02 	call	0x42a	; 0x42a <EEPROM_read>
 9d0:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__data_end+0x3>
 9d4:	89 13       	cpse	r24, r25
 9d6:	18 c0       	rjmp	.+48     	; 0xa08 <__stack+0x1a9>
			{
				LCD_clearscreen();
 9d8:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCD_clearscreen>
				LCD_vSend_string("right password");
 9dc:	8b ea       	ldi	r24, 0xAB	; 171
 9de:	90 e0       	ldi	r25, 0x00	; 0
 9e0:	0e 94 63 03 	call	0x6c6	; 0x6c6 <LCD_vSend_string>
				LCD_movecursor(2,1);
 9e4:	61 e0       	ldi	r22, 0x01	; 1
 9e6:	82 e0       	ldi	r24, 0x02	; 2
 9e8:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCD_movecursor>
				LCD_vSend_string("safe opened");
 9ec:	8a eb       	ldi	r24, 0xBA	; 186
 9ee:	90 e0       	ldi	r25, 0x00	; 0
 9f0:	0e 94 63 03 	call	0x6c6	; 0x6c6 <LCD_vSend_string>
 9f4:	2f ef       	ldi	r18, 0xFF	; 255
 9f6:	87 ea       	ldi	r24, 0xA7	; 167
 9f8:	91 e6       	ldi	r25, 0x61	; 97
 9fa:	21 50       	subi	r18, 0x01	; 1
 9fc:	80 40       	sbci	r24, 0x00	; 0
 9fe:	90 40       	sbci	r25, 0x00	; 0
 a00:	e1 f7       	brne	.-8      	; 0x9fa <__stack+0x19b>
 a02:	00 c0       	rjmp	.+0      	; 0xa04 <__stack+0x1a5>
 a04:	00 00       	nop
 a06:	db ce       	rjmp	.-586    	; 0x7be <main+0x88>
				 _delay_ms(4000);
			}
			else if (tries>0)
 a08:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <tries>
 a0c:	88 23       	and	r24, r24
 a0e:	69 f1       	breq	.+90     	; 0xa6a <__stack+0x20b>
			{
				LCD_clearscreen();
 a10:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCD_clearscreen>
				LCD_vSend_string("wrong password");
 a14:	86 ec       	ldi	r24, 0xC6	; 198
 a16:	90 e0       	ldi	r25, 0x00	; 0
 a18:	0e 94 63 03 	call	0x6c6	; 0x6c6 <LCD_vSend_string>
 a1c:	2f ef       	ldi	r18, 0xFF	; 255
 a1e:	83 ed       	ldi	r24, 0xD3	; 211
 a20:	90 e3       	ldi	r25, 0x30	; 48
 a22:	21 50       	subi	r18, 0x01	; 1
 a24:	80 40       	sbci	r24, 0x00	; 0
 a26:	90 40       	sbci	r25, 0x00	; 0
 a28:	e1 f7       	brne	.-8      	; 0xa22 <__stack+0x1c3>
 a2a:	00 c0       	rjmp	.+0      	; 0xa2c <__stack+0x1cd>
 a2c:	00 00       	nop
				_delay_ms(2000);
				LCD_clearscreen();
 a2e:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCD_clearscreen>
				LCD_vSend_string("tries left:");
 a32:	85 ed       	ldi	r24, 0xD5	; 213
 a34:	90 e0       	ldi	r25, 0x00	; 0
 a36:	0e 94 63 03 	call	0x6c6	; 0x6c6 <LCD_vSend_string>
				tries--;
 a3a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <tries>
 a3e:	81 50       	subi	r24, 0x01	; 1
 a40:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <tries>
				LCD_movecursor(1,12);
 a44:	6c e0       	ldi	r22, 0x0C	; 12
 a46:	81 e0       	ldi	r24, 0x01	; 1
 a48:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCD_movecursor>
				LCD_vSend_char(tries+48);
 a4c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <tries>
 a50:	80 5d       	subi	r24, 0xD0	; 208
 a52:	0e 94 51 03 	call	0x6a2	; 0x6a2 <LCD_vSend_char>
 a56:	2f ef       	ldi	r18, 0xFF	; 255
 a58:	83 ed       	ldi	r24, 0xD3	; 211
 a5a:	90 e3       	ldi	r25, 0x30	; 48
 a5c:	21 50       	subi	r18, 0x01	; 1
 a5e:	80 40       	sbci	r24, 0x00	; 0
 a60:	90 40       	sbci	r25, 0x00	; 0
 a62:	e1 f7       	brne	.-8      	; 0xa5c <__stack+0x1fd>
 a64:	00 c0       	rjmp	.+0      	; 0xa66 <__stack+0x207>
 a66:	00 00       	nop
 a68:	aa ce       	rjmp	.-684    	; 0x7be <main+0x88>
				_delay_ms(2000);
			}
			else if (tries==0)
 a6a:	81 11       	cpse	r24, r1
 a6c:	a8 ce       	rjmp	.-688    	; 0x7be <main+0x88>
			{
				LCD_clearscreen();
 a6e:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LCD_clearscreen>
				LCD_vSend_string("wrong password");
 a72:	86 ec       	ldi	r24, 0xC6	; 198
 a74:	90 e0       	ldi	r25, 0x00	; 0
 a76:	0e 94 63 03 	call	0x6c6	; 0x6c6 <LCD_vSend_string>
				LCD_movecursor(2,1);
 a7a:	61 e0       	ldi	r22, 0x01	; 1
 a7c:	82 e0       	ldi	r24, 0x02	; 2
 a7e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCD_movecursor>
				LCD_vSend_string("safe closed");
 a82:	81 ee       	ldi	r24, 0xE1	; 225
 a84:	90 e0       	ldi	r25, 0x00	; 0
 a86:	0e 94 63 03 	call	0x6c6	; 0x6c6 <LCD_vSend_string>
 a8a:	2f ef       	ldi	r18, 0xFF	; 255
 a8c:	83 ed       	ldi	r24, 0xD3	; 211
 a8e:	90 e3       	ldi	r25, 0x30	; 48
 a90:	21 50       	subi	r18, 0x01	; 1
 a92:	80 40       	sbci	r24, 0x00	; 0
 a94:	90 40       	sbci	r25, 0x00	; 0
 a96:	e1 f7       	brne	.-8      	; 0xa90 <__stack+0x231>
 a98:	00 c0       	rjmp	.+0      	; 0xa9a <__stack+0x23b>
 a9a:	00 00       	nop
 a9c:	90 ce       	rjmp	.-736    	; 0x7be <main+0x88>

00000a9e <_exit>:
 a9e:	f8 94       	cli

00000aa0 <__stop_program>:
 aa0:	ff cf       	rjmp	.-2      	; 0xaa0 <__stop_program>
